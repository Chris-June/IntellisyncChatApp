TODO List:

Database Implementation Requirements:
----------------------------------
1. Set up proper backend infrastructure for Dashboard data:
   - Evaluate and choose appropriate database solution (SQL vs NoSQL)
   - Design schema for:
     * Student progress and performance data
     * Teacher class management and analytics
     * Parent view metrics and progress tracking
   - Implement proper authentication and authorization
   - Ensure data security and privacy compliance

2. Current static data that needs DB storage:
   - Dashboard:
     * User statistics and metrics
     * Performance charts data
   - StudentView:
     * Learning progress
     * Subject strengths
     * Time spent analytics
   - TeacherView:
     * Class size and attendance
     * Student performance data
     * Completion rates
   - ParentView:
     * Child's progress across subjects
     * Performance metrics
     * Achievement tracking

3. Backend Tasks:
   - Create API endpoints for each dashboard view
   - Implement data caching for performance
   - Set up backup and recovery procedures
   - Create data migration strategy

Authentication and Routing Implementation:
----------------------------------------
1. Supabase Integration Steps:
   - Install Supabase client
   - Configure environment variables for Supabase connection
   - Set up authentication methods in supabaseAuth.js
   - Implement real-time session handling

2. Component Setup:
   - Wrap application with AuthProvider from contexts/AuthContext.jsx
   - Implement AppRoutes as main router
   - Set up protected route components for each user type
   - Add loading and error states to auth forms

3. Role-Based Access Implementation:
   - Configure user roles in Supabase
   - Set up role-permission mappings
   - Implement permission checks in protected routes
   - Add role-specific redirects

4. Protected Routes Structure:
   Student Routes (/student/*):
   - Dashboard
   - Progress
   - Assignments
   - Grades

   Parent Routes (/parent/*):
   - Dashboard
   - Children List
   - Progress Tracking
   - Communications

   Teacher Routes (/teacher/*):
   - Dashboard
   - Class Management
   - Assignment Management
   - Grading
   - Student Management

   Admin Routes (/admin/*):
   - Dashboard
   - User Management
   - Settings
   - Analytics

5. Security Considerations:
   - Implement proper session management
   - Set up secure authentication flows
   - Add rate limiting
   - Configure security headers
   - Implement data encryption where necessary

6. Testing Requirements:
   - Test authentication flows
   - Verify role-based access
   - Test protected routes
   - Validate permission checks
   - Test error handling

RAG System Implementation for Education Assistants:
------------------------------------------------
1. System Architecture Planning:
   - Design document storage system for uploaded files
   - Plan vector database integration for embeddings
   - Design API endpoints for file upload and retrieval
   - Plan chunking and embedding strategies for different file types

2. File Upload System:
   - Implement drag & drop interface for Parents/Teachers
   - Add file type validation and size limits
   - Design file organization structure by:
     * Subject area
     * Grade level
     * Document type (homework, syllabus, study guides)
   - Implement progress tracking for uploads

3. Document Processing Pipeline:
   - Set up text extraction for various file formats
   - Implement chunking strategies for different content types
   - Design metadata extraction system
   - Create embedding generation pipeline
   - Plan for batch processing of large uploads

4. Knowledge Base Management:
   - Create interface for managing uploaded documents
   - Implement search and filtering capabilities
   - Add version control for updated documents
   - Design system for marking outdated content

5. Retrieval System:
   - Implement semantic search functionality
   - Design relevance scoring system
   - Create context window optimization
   - Add citation and source tracking
   - Implement feedback mechanism for search results

6. Access Control:
   - Set up role-based access for document management
   - Implement sharing permissions system
   - Add audit logging for document access
   - Create backup and archival system

7. Integration with Assistants:
   - Connect each subject assistant to relevant knowledge base
   - Implement context injection into assistant prompts
   - Add real-time knowledge base updates
   - Create fallback mechanisms for missing information

8. Performance Optimization:
   - Implement caching strategies
   - Design query optimization
   - Plan for scaling vector operations
   - Add monitoring and analytics

9. Testing and Validation:
   - Create test suite for RAG accuracy
   - Implement performance benchmarks
   - Design user feedback collection
   - Plan for continuous system improvement

Note: Keep existing mock data for demo purposes while implementing authentication.
